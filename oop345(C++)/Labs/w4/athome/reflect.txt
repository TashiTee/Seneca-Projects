/*************************************************************************
// week 4 at home
// File: reflect.txt
// Version: 1.0
// Date: 02/27/2019
// Author: Tashi Tsering
// Description: reflection of w4 at home
// A short explanation of what the file is about goes here!
// Revision History
// -----------------------------------------------------------
// Name            Date            Reason
// Fardad          2019-01-15      created empty file for workshop
*************************************************************************/

1. The difference between the implementations of a composition and an aggregation.

The difference between composition and aggregation is that a composition owns object and both the object and the container die (get deleted)
when the container is deleted, while an aggregation simply uses an object that it didn't allocate. For example:
			messages_size = 0;
			messages = new Message*[messages_size];
			for (size_t i = 0; i < messages_size_; ++i) {
				if (messages_[i] != nullptr && !messages_[i]->empty()) {
					messages[messages_size++] = messages_[i];
				}
			}
Creates copies of the pointer-to-Messages in the passed messages_.

2. The difference between the implementations of move and copy functions in a composition and an aggregation.

The difference between the implementations of move and copy functions, composition, you must delete the objects before you copy the source
container's objects, while in an aggregation you can just copy them without having to worry 
about memory management.